import unittest

from game.board import Board


class TestBoard(unittest.TestCase):
    def test_game_initialization(self):
        n = 3
        b = Board(n)
        self.assertEqual(b.turn, 1)
        legal_moves = b.get_legal_moves()
        all_moves = [[((x, y), (i, j)) for i in range(n) for j in range(n)] for x in range(n) for y in range(n)]
        all_moves = sum(all_moves, [])
        self.assertTrue(set(legal_moves) == set(all_moves))
        self.assertIsNone(b.last_move)
        self.assertFalse(b.is_board_full())
        self.assertFalse(b.is_terminal())

    def test_simple_game(self):
        n = 3
        b = Board(n)
        self.assertEqual(b.turn, 1)
        self.assertFalse(b.is_board_full())
        self.assertFalse(b.is_terminal())

        b.play(1, (0, 0), (1, 2))
        b.play(-1, (1, 2), (1, 1))
        b.play(1, (1, 1), (0, 2))
        b.play(-1, (0, 2), (2, 0))
        b.play(1, (2, 0), (0, 0))
        b.play(-1, (0, 0), (1, 0))
        b.play(1, (1, 0), (2, 1))
        b.play(-1, (2, 1), (2, 1))
        b.play(1, (2, 1), (2, 0))
        b.play(-1, (2, 0), (1, 2))
        b.play(1, (1, 2), (0, 1))
        b.play(-1, (0, 1), (0, 0))
        b.play(1, (0, 0), (1, 1))
        b.play(-1, (1, 1), (1, 2))
        b.play(1, (1, 2), (2, 1))
        b.play(-1, (2, 1), (2, 2))
        b.play(1, (2, 2), (2, 0))
        b.play(-1, (2, 0), (1, 0))
        b.play(1, (1, 0), (1, 1))
        b.play(-1, (1, 1), (2, 2))
        b.play(1, (2, 2), (1, 0))
        b.play(-1, (1, 0), (0, 0))
        b.play(1, (0, 0), (2, 2))
        b.play(-1, (2, 2), (1, 2))
        b.play(1, (1, 2), (1, 0))
        b.play(-1, (1, 0), (1, 2))
        b.play(1, (1, 2), (2, 2))
        b.play(-1, (2, 2), (1, 1))
        b.play(1, (1, 1), (1, 1))
        b.play(-1, (1, 1), (0, 0))
        b.play(1, (0, 0), (2, 1))
        b.play(-1, (2, 1), (1, 0))
        b.play(1, (1, 0), (0, 2))
        b.play(-1, (0, 2), (0, 1))
        b.play(1, (0, 1), (0, 1))
        b.play(-1, (0, 1), (2, 1))
        b.play(1, (2, 1), (1, 1))
        b.play(-1, (1, 1), (2, 0))
        b.play(1, (2, 0), (2, 2))
        b.play(-1, (2, 2), (0, 1))
        b.play(1, (0, 1), (1, 0))
        b.play(-1, (1, 0), (2, 2))
        b.play(1, (2, 2), (2, 1))
        b.play(-1, (2, 1), (1, 2))
        b.play(1, (1, 2), (0, 2))
        b.play(-1, (0, 2), (1, 2))
        b.play(1, (1, 2), (2, 0))
        b.play(-1, (2, 0), (2, 1))
        b.play(1, (2, 1), (0, 0))
        b.play(-1, (0, 0), (0, 2))
        b.play(1, (0, 2), (1, 1))
        b.play(-1, (1, 1), (2, 1))
        b.play(1, (2, 1), (0, 1))
        b.play(-1, (0, 1), (0, 2))
        b.play(1, (0, 2), (2, 2))
        b.play(-1, (2, 2), (2, 2))
        b.play(1, (2, 2), (0, 0))
        b.play(-1, (0, 0), (0, 1))
        b.play(1, (0, 1), (2, 2))
        b.play(-1, (1, 0), (1, 0))
        b.play(1, (1, 0), (2, 0))
        b.play(-1, (2, 0), (0, 2))
        b.play(1, (0, 2), (1, 0))
        b.play(-1, (0, 2), (0, 2))
        w = b.play(1, (0, 2), (0, 0))
        self.assertEqual(w, 1)
        self.assertTrue(b.is_terminal())


if __name__ == '__main__':
    unittest.main()
